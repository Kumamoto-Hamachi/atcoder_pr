# 復習必要
+ abc175-a
連続する文字系(パターン分, いらないものを文字分にする)
+ abc182-b
全回しでもいいけど工夫しよう
- abc183-b
図形の知識が抜けていた
- abc180-b
math関係方法他にないか？
- abc165-a
一行で書く/考え方がシンプル
- abc179-b
文字列でやるやり方以外も考える
- abc178-b
ゴリ押しすぎでは?
- abc177-b
何回もwc出し過ぎ、遅すぎ、単純にもっと綺麗に書けるのでは
- abc175-b
何回も誤読しすぎ、組み合わせ問題
- abc173-b
すでに用意されているリストとの比較の処理
- abc184-c
全パターンを思いつく -> 抽象化して数式にする
- abc183-c
パターンを思いつくのテストをみてからでは遅い。二次元配列の巨大さに騙されず必要な組合を考えろ
- abc169-b
一瞬順番に1~nまで並んでいると勘違い(この場合の面白い話下記)、また処理を軽減する方法に少しだけ時間かかる
https://detail.chiebukuro.yahoo.co.jp/qa/question_detail/q11129413206
- abc182-c
汚すぎる、時間かかりすぎ(テストたくさんやれ)
- abc178-c
順列/組み合わせ、というより場合分け、冷静に考え炉
- abc186-d
絶対値の性質考えろ、累積和
- abc122-c
累積和
- abc177-c
累積和
- abc176-c
一つづずれ、比較用の変数用意すると良い(チェックは難しくなる)
- abc87-c
二重リスト、場合分け
- abc79-c
bit全探索、eval、論理演算
- abc159-b
ゴリ押しすぎる、他のコード確認必ずすること
- abc160-c
図に書いてみろ,一周-ある辺、あまりで次を表現
- abc163-c
TLEとならないようにするには、countの計算量は？
- abc165-d
両方が整数のとき一致する、それはxがBのとき、不等号評価で考える
- abc166-c
計算量少なくするにはを考えなくていい？
- abc165-c
難しい,理解できていない
- abc169-c
小数の扱い
- abc159-c
計算式に
- abc171-c
進数ならどうするのが扱いやすい？
- abc174-d
素直に理想型考えよう、一番効率いいのは？
- abc158-d
何度も[::-1]するのってすごい計算量になるんだなぁ
# Python仕様
- input()/
- snput = lambda: sys.stdin.readline().rstrip()
- timeit
- python -c 'for _ in range(1000) print(0) | main.py'
- globals()
- itertools

